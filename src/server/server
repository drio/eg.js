#!/usr/bin/env node

var eg_probes    = require('./eg-probes'),
    _            = require('underscore'),
    lr           = require('./line-reader'),
    eg_screening = require('./eg-screening'),
    eg_hits      = require('./eg-hits'),
    probes,
    http = require('http'),
    io   = require('socket.io'),
    fs   = require('fs'),
    path = require('path');

var pipe = {
  clients: [],
  dump: function(msg) {
    _.each(this.clients, function(c) {
      c.send(msg);
    });
  }
}

// type    : type of answer
// payload : array of key/value pairs of the payload
function send_data(type, payload) {
  var jo = {}; // json object

  jo.type = type;
  _.each(payload, function(e) { jo[e[0]] = e[1]; });

  pipe.dump(JSON.stringify(jo));
}

function screen_reads(reads_file, probes) {
  var i        = 0,
      p_length = eg_probes.probe_size(),
      middle   = parseInt(p_length/2, 10),
      n_hits   = 0;

  lr.eachLine(reads_file, function(line, last) {
    if (line[0] !== '>') {
      if (++i % 100000 === 0) {
        console.log(">> # of reads processed: " + i + " h: " + n_hits);
        send_data('info', [ ["n_reads", i] , ["n_hits", n_hits]]);
      }
      eg_screening.process_read(line, probes, p_length, middle,
                                function(probe_id, ref_or_var) {
        _.each(eg_hits.add(probe_id, ref_or_var), function(c) { // Iterate over the matrix changes and send them
          send_data('heatmap', [["r", c.r] , ["v", c.v], ["c", c.c ]]);
        });
        n_hits++;
      });
    }
  }).then(function() {
    console.log(">> Done. # of reads processed: " + i + " h: " + n_hits);
    send_data('info', [ ["n_reads", i] , ["n_hits", n_hits]]);
  });
}

//1       100006955       rs4908018       TTTGTCTAAAACAAC CTTTCACTAGGCTCA C       A
function hash_probes(probe_file, reads_file) {
  console.log(">> Hashing ...");
  lr.eachLine(probe_file, function(line, last) {
    eg_probes.hash_probe(line);
  }).then(function() {
    var n_probes = _.keys(eg_probes.probes).length;
    console.log(">> # of probes: " + n_probes);
    screen_reads(reads_file, eg_probes.probes);
  });
}

/* Server HTTP requests */
function serve_this(req, res) {
  var public_html="./src/client",
      fpath = "";

  if (req.url === '/')
    fpath = public_html + '/index.html';
  else
    fpath = public_html + req.url;

  console.log('>> Requesting: ' + fpath);

  var ext_name     = path.extname(fpath);
  var content_type = 'text/html';
  switch (ext_name) {
    case '.js':
      content_type = 'text/javascript';
      break;
    case '.css':
      content_type = 'text/css';
      break;
  }

  path.exists(fpath, function(exists) {
    if (exists) {
      fs.readFile(fpath, function(error, content) {
        if (error) {
          res.writeHead(500);
          res.end();
        }
        else {
          res.writeHead(200, { 'Content-Type': content_type });
          res.end(content, 'utf-8');
        }
      });
    }
    else {
      res.writeHead(404);
      res.end();
    }
  });
}

/*******************
 * Main
 ******************/
server = http.createServer();
server.on('request', function(req, res){
  serve_this(req,res);
});
server.listen(8080);

// Use the server to create a dedicated socket with clients
var socket = io.listen(server);

// Wait for at least one client to connect to the socket
// When so, start e-genotype
socket.on('connection', function(client){
  pipe.clients.push(client);
  if (pipe.clients.length === 1) {
    hash_probes("./data/affy_human.txt", "/Users/drio/sshfs/ardmore_drio/playground/eg.js.sample/split.01");
    //hash_probes("./data/affy_human.txt", "./data/illumina.fasta");
  }
});

console.log(">> Waiting for client ...");
